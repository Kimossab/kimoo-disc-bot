name: Create Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 17.x, 18.x, 19.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - run: |
          npm ci
          npm run build
        name: Build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: node-v${{ matrix.node-version }}-release
          path: |
            build
            package-lock.json
            package.json

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v3
      - name: Zip artifact for deployment
        run: |
          ls -la
          (cd node-v16.x-release && zip -r "$OLDPWD/package.zip" .)
          (cd node-v17.x-release && zip -r "$OLDPWD/package.zip" .)
          (cd node-v18.x-release && zip -r "$OLDPWD/package.zip" .)
          (cd node-v19.x-release && zip -r "$OLDPWD/package.zip" .)
          ls -la
      - name: Create Release
        run: gh release create ${{github.ref_name}} --generate-notes ./*.zip
      # - name: Create draft release
      #   id: draft
      #   run: |
      #     echo "${{github.api_url}}/repos/${{github.repository}}/releases"
      #     curl \
      #       -s \
      #       -X POST \
      #       -H 'Accept:application/vnd.github+json' \
      #       -H 'Authorization:Bearer ${{github.token}}' \
      #       ${{github.api_url}}/repos/${{github.repository}}/releases \
      #       -o release-output.json \
      #       -d '{"tag_name":"${{github.ref_name}}","target_commitish":"master","name":"${{github.ref_name}}","draft":true,"prerelease":false,"generate_release_notes":true}'
      #     echo ${{github.ref_name}}
      #     echo "upload_url=$(cat release-output.json | jq -r '.upload_url' | cut -d{ -f'1')" >> $GITHUB_OUTPUT
      #     echo "url=$(cat release-output.json | jq -r '.url')" >> $GITHUB_OUTPUT
      #     echo "html_url=$(cat release-output.json | jq -r '.html_url')" >> $GITHUB_OUTPUT
      # - name: Upload assets
      #   run: |
      #     curl \
      #       -s \
      #       --upload-file node-v16.x-release.zip \
      #       -X POST \
      #       -H 'Accept:application/vnd.github+json' \
      #       -H 'Authorization:Bearer ${{github.token}}' \
      #       -H "Content-Type: application/zip" \
      #       ${{steps.draft.outputs.upload_url}}?name=node-v16.x-release.zip
      #     curl \
      #       -s \
      #       --upload-file node-v17.x-release.zip \
      #       -X POST \
      #       -H 'Accept:application/vnd.github+json' \
      #       -H 'Authorization:Bearer ${{github.token}}' \
      #       -H "Content-Type: application/zip" \
      #       ${{steps.draft.outputs.upload_url}}?name=node-v17.x-release.zip
      #     curl \
      #       -s \
      #       --upload-file node-v18.x-release.zip \
      #       -X POST \
      #       -H 'Accept:application/vnd.github+json' \
      #       -H 'Authorization:Bearer ${{github.token}}' \
      #       -H "Content-Type: application/zip" \
      #       ${{steps.draft.outputs.upload_url}}?name=node-v18.x-release.zip
      #     curl \
      #       -s \
      #       --upload-file node-v19.x-release.zip \
      #       -X POST \
      #       -H 'Accept:application/vnd.github+json' \
      #       -H 'Authorization:Bearer ${{github.token}}' \
      #       -H "Content-Type: application/zip" \
      #       ${{steps.draft.outputs.upload_url}}?name=node-v19.x-release.zip
      # - name: Publish release
        run: |
          echo ${{steps.draft.outputs.url}}
          curl \
            -s \
            -X PATCH \
            -H 'Accept:application/vnd.github+json' \
            -H 'Authorization:Bearer ${{github.token}}' \
            ${{steps.draft.outputs.url}} \
            -d '{"tag_name":"${{github.ref_name}}","draft":false,"prerelease":false}'
